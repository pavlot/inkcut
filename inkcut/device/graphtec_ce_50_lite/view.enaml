# -*- coding: utf-8 -*-
"""
Copyright (c) 2017, Jairus Martin.

Distributed under the terms of the GPL v3 License.

The full license is in the file LICENSE, distributed with this software.

Created on Dec 8, 2017

@author: jrm
"""
from enaml.core.api import Looper
from inkcut.core.utils import load_icon
from enaml.layout.api import hbox, align
from enaml.styling import StyleSheet, Style, Setter
from enaml.widgets.api import (
    Container, Form, Label, ObjectCombo, SpinBox, CheckBox, Notebook, Page, PushButton
)
from enamlx.widgets.api import DoubleSpinBox
from .driver import PiConfig # TODO PTAR Remove it
from .driver import ConditionConfig
from enaml.qt.QtWidgets import QApplication

enamldef ConfigSheet(StyleSheet):
    Style:
        element = 'Label'
        style_class = 'label-warning'
        Setter:
            field = 'color'
            value = 'yellow'
    Style:
        element = 'Label'
        style_class = 'label-error'
        Setter:
            field = 'color'
            value = 'red'


enamldef ConditionForm(Form):
    attr model: ConditionConfig
    Label:
        text = QApplication.translate("pi", "Tool")


enamldef ConfigView(Container): view:
    """ Config editor for the PiDevice when the
    user selects it. The device.config Model is
    passed in here so it can be modified.
    """
    attr model: PiConfig
    padding = 0
    ConfigSheet:
        pass
    Container:
        padding = 0
        constraints = [
            hbox(lb_status_title, lb_status_value, pb),
            align('v_center', lb_status_title, lb_status_value, pb)
        ]
        Label: lb_status_title:
            text = QApplication.translate("parallelport", "Status")
        Label: lb_status_value:
            text = QApplication.translate("parallelport", "Not connected")
            style_class = 'label-error'
        PushButton: pb:
            text = QApplication.translate("parallelport", "Refresh")
            icon = load_icon("arrow_refresh")
#            clicked :: model.refresh()    
    Notebook:
        tab_style = 'document'
        tab_position = 'left'
        constraints = [
            hbox(nb_conditions),
        ]        
        Page:
            closable = False
            title = QApplication.translate("pi", "Conditions")
            Container:
                Notebook: nb_conditions:
                    tab_style = 'document'
                    tab_position = 'top'
                    Looper: looper:
                        iterable << range(1,9)
                        Page:
                            closable = False
                            title = QApplication.translate("pi", "Condition {}".format(loop.item))
                            Form:
                                ConditionForm:
                                    pass